// <copyright file="CompilationUnit.cs" company="Gamma Four, Inc.">
//    Copyright © 2025 - Gamma Four, Inc.  All Rights Reserved.
// </copyright>
// <author>Donald Roy Airey</author>
namespace GammaFour.DataModelGenerator.Model
{
    using System.Collections.Generic;
    using GammaFour.DataModelGenerator.Common;
    using Microsoft.CodeAnalysis;
    using Microsoft.CodeAnalysis.CSharp;
    using Microsoft.CodeAnalysis.CSharp.Syntax;

    /// <summary>
    /// A complete unit for the compiler.
    /// </summary>
    public class CompilationUnit
    {
        /// <summary>
        /// The namespace for the generated module.
        /// </summary>
        private readonly string customToolNamespace;

        /// <summary>
        /// The data model schema.
        /// </summary>
        private readonly XmlSchemaDocument xmlSchemaDocument;

        /// <summary>
        /// Initializes a new instance of the <see cref="CompilationUnit"/> class.
        /// </summary>
        /// <param name="xmlSchemaDocument">The data model schema.</param>
        /// <param name="customToolNamespace">The namespace for the genreated file.</param>
        public CompilationUnit(XmlSchemaDocument xmlSchemaDocument, string customToolNamespace)
        {
            // Initialize the object.
            this.customToolNamespace = customToolNamespace;
            this.xmlSchemaDocument = xmlSchemaDocument;

            // This is the syntax for the compilation unit.
            this.Syntax = SyntaxFactory.CompilationUnit()
            .WithMembers(
                SyntaxFactory.List<MemberDeclarationSyntax>(
                    new MemberDeclarationSyntax[]
                    {
                        new Namespace(this.customToolNamespace).Syntax,
                        new DtoNamespace(this.xmlSchemaDocument, this.customToolNamespace).Syntax,
                        new MasterNamespace(this.xmlSchemaDocument, this.customToolNamespace).Syntax,
                        new SlaveNamespace(this.xmlSchemaDocument, this.customToolNamespace).Syntax,
                    }))
            .WithLeadingTrivia(CompilationUnit.LeadingTrivia);
        }

        /// <summary>
        /// Gets or sets the syntax.
        /// </summary>
        public CSharpSyntaxNode Syntax
        {
            get;
            set;
        }

        /// <summary>
        /// Gets the documentation comment.
        /// </summary>
        private static SyntaxTriviaList LeadingTrivia
        {
            get
            {
                // The document comment trivia is collected in this list.
                List<SyntaxTrivia> trivia = new List<SyntaxTrivia>
                {
                    // // <auto-generated />
                    SyntaxFactory.Comment("// <auto-generated />"),

                    // #nullable true
                    SyntaxFactory.Trivia(
                        SyntaxFactory.NullableDirectiveTrivia(
                            SyntaxFactory.Token(SyntaxKind.EnableKeyword),
                            true)),
                };

                // This is the complete document comment.
                return SyntaxFactory.TriviaList(trivia).NormalizeWhitespace();
            }
        }
    }
}