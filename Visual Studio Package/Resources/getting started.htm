
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html>
<head>
    <link href="https://i1.code.msdn.s-msft.com/RequestReduceContent/7d1a8919f61a08002234d280dd5fdbe9-18e85efe818ad8ffe338c9e172023605-RequestReducedStyle.css" rel="Stylesheet" type="text/css" />
    <title>Resource Generator</title>
    <meta name="description" content="This product contains a updated version of the old Microsoft PublicResXFileCodeGenerator code generator for Portable Class Libraries." />

    <script src="https://ajax.aspnetcdn.com/ajax/jquery/jquery-1.6.1.min.js" type="text/javascript"></script>
    <script src="https://i1.visualstudiogallery.msdn.s-msft.com/content/common/chili/jquery.chili-2.2.min.js" type="text/javascript"></script>
    <script src="https://i1.visualstudiogallery.msdn.s-msft.com/content/common/chili/recipes.js" type="text/javascript"></script>
    <script src="https://i1.code.msdn.s-msft.com/RequestReduceContent/6581f6c4ac1f1708c0b87cbada77fc9c-aeb7659c0a142bfce150e055d235df7b-RequestReducedScript.js" type="text/javascript"></script>
    <script type="text/javascript">
            function initializePage() {
                var activeTabData = 'activeTab';
                var otherTabClass = 'otherTab';
                var hiddenPreClass = 'hidden';
                $("a[href^=#]").attr("target","_self");
                $("div.scriptcode").each(function (i) {
                    var scriptBlock = $(this);
                    scriptBlock.trackCopy(trackCodeSnippetCodeDownload);
                    var labelElems = scriptBlock.find("div.title > span");
                    if (labelElems.length == 0) {
                        labelElems = scriptBlock.find("div.title");
                    }
                    var languageSpans = scriptBlock.find("span.hidden");
                    var pres = scriptBlock.find("pre");
                    if (languageSpans.length > 0 && pres.length > 1) {
                        labelElems.each(function(index, elem) {
                            var codePre = $(pres[index]);
                            var labelSpan = $(elem);
                            var languageSpan = $(languageSpans[index]);
                            labelSpan.data('code', codePre.text().replace(/(\r(\n)?)|((\r)?\n)/ig, '\r\n'));
                            codePre.removeClass(hiddenPreClass);
                            codePre.addClass(languageSpan.text().replace(/^\s+|\s+$/g,""));
                            codePre.chili();
                            languageSpan.remove();
                        });

                        pres = scriptBlock.find("pre");
                        labelElems.each(function(index, elem) {
                            var codePre = $(pres[index]);
                            var labelSpan = $(elem);
                            if (index == 0) {
                                scriptBlock.data(activeTabData, 0);
                            }
                            else {
                                labelSpan.addClass(otherTabClass);
                                codePre.addClass(hiddenPreClass);
                            }
                            labelSpan.click(function (e) {
                                var activeTab = scriptBlock.data(activeTabData);
                                $(labelElems[activeTab]).addClass(otherTabClass);
                                $(pres[activeTab]).addClass(hiddenPreClass);

                                codePre.removeClass(hiddenPreClass);
                                labelSpan.removeClass(otherTabClass);
                                scriptBlock.data(activeTabData, index);

                                if( window.parent.Galleries ) {
                                    window.parent.Galleries.project.resizeDesc();
                                }
                            });
                        });

                        var preview = scriptBlock.find('div.preview');
                        if (preview.length == 0) {
                            preview = $(pres[pres.length - 1]);
                        }
                        preview.remove();

                        if (window.clipboardData && clipboardData.setData) {
                            var copyLink = $("<a href='#' class='copyCode'>Copy code</a>");
                            copyLink.click(function (e) {
                                trackCodeSnippetCodeDownload();
                                clipboardData.setData("Text", $(labelElems[scriptBlock.data(activeTabData)]).data('code'));
                                return false;
                            });
                            $(this).prepend(copyLink);
                        }
                    }
                });

                if ((window.parent) && (window.parent.Galleries)) {
                    window.parent.Galleries.project.resizeDesc();
                }

                    if (top.location == self.location) {
                         window.location.replace(window.location.href.replace('/description', ''));
                    }
            }

            function trackCodeSnippetCodeDownload() {
                if ((window.parent) && (window.parent.gTracker)) {
                    window.parent.gTracker.createActionEvent('Description', 'Download', 'Copy', 'CodeSnippet', null);
                }
            }

            function overrideAnchorLinksForFirefoxAndChrome(iframeId) {
                if(($.browser.mozilla && parseInt($.browser.version, 10) >= 2) || $.browser.webkit) {
                    var iframeOffset = $("#" + iframeId, window.parent.document).offset();
                    $("a").each(function () {
                        var link = $(this);
                        var href = link.attr("href");
                        if (href && href[0] == "#") {
                            var name = href.substring(1);
                            $(this).click(function () {
                                var nameElement = $("[name='" + name + "']");
                                var idElement = $("#" + name);
                                var element = null;
                                if (nameElement.length > 0) {
                                    element = nameElement;
                                } else if (idElement.length > 0) {
                                    element = idElement;
                                }

                                if (element) {
                                    var offset = element.offset();
                                    window.parent.scrollTo(offset.left, offset.top + iframeOffset.top);
                                }

                                return false;
                            });
                        }
                    });
                }
            }

            $(window).load(function(){
                initializePage();
                overrideAnchorLinksForFirefoxAndChrome("longdescIframe");

            });

    </script>
    <base target="_parent" />
</head>
<body>
    <div id="longDesc">

        <div class="WordSection1">
            <p><strong>Getting Started</strong></p>
            <p>
                This package contains a custom tool that can be used to replace the&nbsp;<strong>PublicResXFileCodeGenerator</strong>&nbsp;that Microsoft uses by default to generate resources.&nbsp; The biggest problem with the Microsoft default code generator is that the
                generated constructor is protected, which means that it can&rsquo;t be used to construct strongly-typed resources in Visual Studio in Portable Class Libraries (PCL).&nbsp; Simply replace the&nbsp;<strong>PublicResXFileCodeGenerator</strong>&nbsp;custom tool
                on all the resources with&nbsp;<strong>ResourceGenerator</strong>&nbsp;and a portable version of the resources will be generated.
            </p>
            <p>
                To create portable resources, start with a Portable Class Library project.&nbsp; Create a directory for your resources (e.g. Strings, this step is optional).&nbsp; The right click on the project, select &ldquo;Add&hellip;&rdquo; and select&nbsp;<strong>
                    Resources
                    File
                </strong>&nbsp;from the options.&nbsp; Name the file whatever you want (e.g. Resources, Errors, etc.) and hit Add.&nbsp; Select the .RESX file from the Solution Explorer window and hit F4 to get to the properties.&nbsp; In the Custom Tools property, remove&nbsp;<strong>ResXFileCodeGenerator</strong>&nbsp;or&nbsp;<strong>PublicResXFileCodeGenerator</strong>&nbsp;and
                type in&nbsp;<strong>ResourceGenerator</strong>.&nbsp; Now your solution can use these strings from code or XAML, in WPF, Windows 8 or UWP projects.
            </p>
            <p>
                To add localization, create a copy of the resource file and add extensions for the cultures you want to support, such as en-GB, fr-FR or any other combination.&nbsp; After adding the resource file, updating the extension, and translating the text (I&rsquo;m
                a big fan of Google Translate for this part), you will need to remove the &lsquo;Custom Tool&rsquo; property and make sure that each of the culture files has an Embedded Resource as a Build Action.&nbsp; The directory should look like this:
            </p>
            <p><span>&nbsp;<img id="241061" src="https://donairey.gallerycdn.vsassets.io/extensions/donairey/resourcegenerator/1.6/1497798307345/241061/1/Directory%20Tree%20for%20Resource%20Generator.png" alt="" width="328" height="273"></span></p>
            <p>At this point, the .NET libraries will pick up the current culture and display the French labels on dialogs when in France, and the English error messages when in Great Britain.</p>
            <p class="MsoNormal" style="text-align:center; line-height:normal">&nbsp;</p>
        </div>

    </div>
</body>
</html>